package com.example.beautydate.data.models

/**
 * Service category enumeration
 * Categorizes services for better organization and filtering
 * Memory efficient: enum class for type safety
 */
enum class ServiceCategory {
    NAIL,           // üíÖ Tƒ±rnak
    MASSAGE,        // üíÜ Masaj  
    SKIN_CARE,      // ‚ú® Cilt Bakƒ±mƒ±
    MAKEUP,         // üíÑ Makyaj
    EPILATION,      // üå∏ Epilasyon/Lazer
    WELLNESS,       // üéØ Zayƒ±flama/V√ºcut
    EYEBROW_LASH;   // üëÅÔ∏è Ka≈ü & Kirpik
    
    /**
     * Returns Turkish display name for category
     * Memory efficient: when expression with string constants
     */
    fun getDisplayName(): String {
        return when (this) {
            NAIL -> "Tƒ±rnak"
            MASSAGE -> "Masaj"
            SKIN_CARE -> "Cilt Bakƒ±mƒ±"
            MAKEUP -> "Makyaj"
            EPILATION -> "Epilasyon/Lazer"
            WELLNESS -> "Zayƒ±flama/V√ºcut"
            EYEBROW_LASH -> "Ka≈ü & Kirpik"
        }
    }
    
    /**
     * Returns category description
     */
    fun getDescription(): String {
        return when (this) {
            NAIL -> "Manik√ºr, Pedik√ºr, Nail Art i≈ülemleri"
            MASSAGE -> "Klasik, Aromaterapi, Thai masajlarƒ±"
            SKIN_CARE -> "Cilt temizliƒüi, Anti-aging, Leke kar≈üƒ±tƒ±"
            MAKEUP -> "G√ºnl√ºk, Gece, Gelin makyajlarƒ±"
            EPILATION -> "Lazer, ƒ∞ƒüneli, Aƒüda epilasyon"
            WELLNESS -> "Zayƒ±flama, Detoks, V√ºcut ≈üekillendirme"
            EYEBROW_LASH -> "Ka≈ü alƒ±mƒ±, Laminasyon, Kirpik i≈ülemleri"
        }
    }
    
    /**
     * Returns emoji icon for category
     * Memory efficient: cached emoji strings
     */
    fun getEmoji(): String {
        return when (this) {
            NAIL -> "üíÖ"
            MASSAGE -> "üíÜ"
            SKIN_CARE -> "‚ú®"
            MAKEUP -> "üíÑ"
            EPILATION -> "üå∏"
            WELLNESS -> "üéØ"
            EYEBROW_LASH -> "üëÅÔ∏è"
        }
    }
}

/**
 * Service subcategory enumeration
 * Provides specific service types within each category
 * Memory efficient: enum class with category association
 */
enum class ServiceSubcategory(
    val category: ServiceCategory,
    val displayName: String,
    val defaultPrice: Double = 0.0
) {
    // Tƒ±rnak Kategorisi
    MANICURE(ServiceCategory.NAIL, "Manik√ºr", 80.0),
    PEDICURE(ServiceCategory.NAIL, "Pedik√ºr", 100.0),
    MANICURE_PEDICURE(ServiceCategory.NAIL, "Manik√ºr + Pedik√ºr", 150.0),
    PERMANENT_POLISH(ServiceCategory.NAIL, "Kalƒ±cƒ± Oje", 120.0),
    GEL_NAIL(ServiceCategory.NAIL, "Jel Tƒ±rnak", 150.0),
    PROSTHETIC_NAIL(ServiceCategory.NAIL, "Protez Tƒ±rnak", 200.0),
    NAIL_CARE(ServiceCategory.NAIL, "Tƒ±rnak Bakƒ±mƒ±", 60.0),
    NAIL_ART(ServiceCategory.NAIL, "Tƒ±rnak S√ºsleme (Nail Art)", 80.0),
    
    // Masaj Kategorisi
    CLASSIC_MASSAGE(ServiceCategory.MASSAGE, "Klasik Masaj", 200.0),
    AROMATHERAPY_MASSAGE(ServiceCategory.MASSAGE, "Aromaterapi Masajƒ±", 250.0),
    DEEP_TISSUE_MASSAGE(ServiceCategory.MASSAGE, "Derin Doku Masajƒ±", 300.0),
    HOT_STONE_MASSAGE(ServiceCategory.MASSAGE, "Sƒ±cak Ta≈ü Masajƒ±", 350.0),
    THAI_MASSAGE(ServiceCategory.MASSAGE, "Thai Masajƒ±", 400.0),
    REFLEXOLOGY(ServiceCategory.MASSAGE, "Refleksoloji", 180.0),
    MEDICAL_MASSAGE(ServiceCategory.MASSAGE, "Medikal Masaj", 280.0),
    
    // Cilt Bakƒ±mƒ± Kategorisi
    DEEP_CLEANSING(ServiceCategory.SKIN_CARE, "Derinlemesine Cilt Temizliƒüi", 150.0),
    ANTI_AGING_CARE(ServiceCategory.SKIN_CARE, "Anti-aging Bakƒ±m", 200.0),
    ANTI_SPOT_CARE(ServiceCategory.SKIN_CARE, "Leke Kar≈üƒ±tƒ± Bakƒ±m", 180.0),
    MOISTURIZING_CARE(ServiceCategory.SKIN_CARE, "Nemlendirici Bakƒ±m", 120.0),
    BLACKHEAD_CLEANING(ServiceCategory.SKIN_CARE, "Siyah Nokta Temizliƒüi", 100.0),
    SKIN_RENEWAL(ServiceCategory.SKIN_CARE, "Cilt Yenileme (Peeling)", 160.0),
    EYE_CARE(ServiceCategory.SKIN_CARE, "G√∂z √áevresi Bakƒ±mƒ±", 80.0),
    
    // Makyaj Kategorisi
    DAILY_MAKEUP(ServiceCategory.MAKEUP, "G√ºnl√ºk Makyaj", 120.0),
    EVENING_MAKEUP(ServiceCategory.MAKEUP, "Gece Makyajƒ±", 180.0),
    ENGAGEMENT_MAKEUP(ServiceCategory.MAKEUP, "Ni≈üan Makyajƒ±", 250.0),
    BRIDE_MAKEUP(ServiceCategory.MAKEUP, "Gelin Makyajƒ±", 400.0),
    PROFESSIONAL_MAKEUP(ServiceCategory.MAKEUP, "Profesyonel Makyaj", 300.0),
    PERMANENT_MAKEUP(ServiceCategory.MAKEUP, "Kalƒ±cƒ± Makyaj", 500.0),
    
    // Epilasyon/Lazer Kategorisi
    REGIONAL_LASER(ServiceCategory.EPILATION, "B√∂lgesel Lazer Epilasyon", 300.0),
    FULL_BODY_LASER(ServiceCategory.EPILATION, "T√ºm V√ºcut Lazer Epilasyon", 800.0),
    NEEDLE_EPILATION(ServiceCategory.EPILATION, "ƒ∞ƒüneli Epilasyon", 150.0),
    SUGAR_WAXING(ServiceCategory.EPILATION, "≈ûeker Aƒüda", 100.0),
    ROLL_ON_WAXING(ServiceCategory.EPILATION, "Roll-on Aƒüda", 80.0),
    SIR_WAXING(ServiceCategory.EPILATION, "Sir Aƒüda", 120.0),
    
    // Zayƒ±flama/V√ºcut Kategorisi
    LYMPH_DRAINAGE(ServiceCategory.WELLNESS, "Lenf Drenaj", 200.0),
    CAVITATION(ServiceCategory.WELLNESS, "Kavitasyon", 300.0),
    RADIOFREQUENCY(ServiceCategory.WELLNESS, "Radyofrekans", 250.0),
    EMS_TREATMENT(ServiceCategory.WELLNESS, "EMS (Elektriksel Kas Stim√ºlasyonu)", 180.0),
    CELLULITE_MASSAGE(ServiceCategory.WELLNESS, "Sel√ºlit Masajƒ±", 150.0),
    BODY_TONING(ServiceCategory.WELLNESS, "V√ºcut Sƒ±kƒ±la≈ütƒ±rma", 220.0),
    
    // Ka≈ü & Kirpik Kategorisi
    EYEBROW_SHAPING(ServiceCategory.EYEBROW_LASH, "Ka≈ü Alƒ±mƒ±", 50.0),
    EYEBROW_LAMINATION(ServiceCategory.EYEBROW_LASH, "Ka≈ü Laminasyonu", 120.0),
    EYEBROW_MICROBLADING(ServiceCategory.EYEBROW_LASH, "Ka≈ü Kont√ºr√º (Microblading)", 400.0),
    LASH_LIFTING(ServiceCategory.EYEBROW_LASH, "Kirpik Lifting", 150.0),
    LASH_EXTENSION(ServiceCategory.EYEBROW_LASH, "Kirpik Takma", 300.0),
    PERMANENT_EYEBROW_COLOR(ServiceCategory.EYEBROW_LASH, "Kalƒ±cƒ± Ka≈ü Renklendirme", 200.0);
    
    companion object {
        /**
         * Gets all subcategories for a specific category
         * Memory efficient: filtered list creation
         */
        fun getSubcategoriesForCategory(category: ServiceCategory): List<ServiceSubcategory> {
            return values().filter { it.category == category }
        }
        
        /**
         * Gets subcategory by display name
         * Memory efficient: single find operation
         */
        fun getByDisplayName(displayName: String): ServiceSubcategory? {
            return values().find { it.displayName == displayName }
        }
    }
} 